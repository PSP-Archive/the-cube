#ifndef _SEB_CAMERA_H
#define _SEB_CAMERA_H

#include <pspctrl.h>
#include <stdlib.h>	
#include <pspgum.h>
#include <math.h>

typedef struct s_scam
{
    ScePspFVector3 position;
    ScePspFVector3 view;
    ScePspFVector3 up_vector;
    ScePspFVector3 strafe;
    float radius;
}scam_t;    

scam_t *SCAM_Init (void);
void SCAM_Dispose (scam_t *camera);

// This intializes the camera's sphere radius
void SCAM_SetRadius (scam_t *camera, float radius);

// This changes the position, view, and up vector of the camera.
// This is primarily used for initialization
void SCAM_Position (scam_t *camera, ScePspFVector3 *vPosition, ScePspFVector3 *vView, ScePspFVector3 *vUpVector);

// This rotates the camera's view around the position depending on the values passed in.
void SCAM_RotateView (scam_t *camera, float angle, float X, float Y, float Z);

// This moves the camera's view by the analog pad movements (First person view)
void SCAM_SetViewByPad (scam_t *camera, SceCtrlData pad); 

// This rotates the camera around a point (I.E. your character).
void SCAM_RotateAroundPoint (scam_t *camera, ScePspFVector3 vCenter, float angle, float x, float y, float z);

// This strafes the camera left or right depending on the speed (+/-) 
void SCAM_Strafe (scam_t *camera, float speed);

// This will move the camera forward or backward depending on the speed
void SCAM_Move (scam_t *camera, float speed);

// This checks for keyboard movement
void SCAM_CheckForMovement (scam_t *camera, SceCtrlData pad, float g_FrameInterval);

// This takes a list of vertices and the vertex count to determine if the camera's
// sphere has collided with them.
void SCAM_CheckCameraCollision (scam_t *camera, ScePspFVector3 *pVertices, int numOfVerts);

// This updates the camera's view and other data (Should be called each frame)
void SCAM_Update (scam_t *camera, SceCtrlData pad, float g_FrameInterval);

// This uses sceGumLookAt() to tell PSP where to look
void SCAM_Look (scam_t *camera);

#endif


